#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('graank-tool:server');
var http = require('http');
var spawn = require('child_process').spawn

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

app.get('/runPython', function(req, res){
  //res.render('index', { title: 'graank' });
  console.log("working")
  //function runPythonCode(request){
    const pythonProcess = spawn('python', req);
    pythonProcess.stdout.on('data', (data) => {
        // Do something with the data returned from python script
        //document.getElementById('text-result').innerHTML = `${data}`
        //showResultContent()
        //closeProgress()
        console.log("working")
        res.send(data)
    });
    pythonProcess.stderr.on('data', (data) => {
      console.error("Error: ", data.toString());
      //msgLabel.innerHTML = '<p>sorry, an error occured</p><br><p>check console for more details</p>'
      //closeProgress()
    })
    pythonProcess.on('close', (code) => {
      console.log("Child exited with code ", code);
    })
  //}
});
